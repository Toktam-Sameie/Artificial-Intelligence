{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "primary-chemistry",
   "metadata": {},
   "source": [
    "<h1 style = \"font-size: 30px; text-align: center;\">Artificial Intelligence </h1>\n",
    "<h1 style = \"font-size: 30px; text-align: center;\">computer Assienment 3</h1>\n",
    "<h2 style = \"font-size: 25px; text-align: center;\">Naive Bayes Classifier</h2>\n",
    "<h2 style = \"font-size: 25px; text-align: center; color: #666\">Name: Toktam Sameie</h2>\n",
    "<h2 style = \"font-size: 25px; text-align: center; color: #666\">Student Id: 810896054</h2>\n",
    "<h4 style=\"text-align: center\">Spring 1400</h4>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "competent-paste",
   "metadata": {},
   "source": [
    "<h2 style = \"font-size: 15px; color: #236\">In this project , I'm going to train a model based on Naive Bayes Classification to predict the category of books based on their descriptions , \n",
    "because the title does not have much information \n",
    "and it may have special names that are misleading in the estimation process. . <h2/>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 237,
   "id": "combined-shame",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import time\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import time\n",
    "from collections import Counter\n",
    "from nltk.corpus import stopwords\n",
    "import copy\n",
    "from IPython.display import Latex\n",
    "import nltk\n",
    "from nltk.tokenize import sent_tokenize, word_tokenize\n",
    "from nltk.tokenize import RegexpTokenizer\n",
    "tokenizer = RegexpTokenizer(r'\\w+')\n",
    "from nltk.tokenize import word_tokenize"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "assisted-possibility",
   "metadata": {},
   "source": [
    "<h2 style = \"font-size: 15px; color: #236\"> I use this function to display results in table form  :\n",
    "    </h2>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 238,
   "id": "weird-nitrogen",
   "metadata": {},
   "outputs": [],
   "source": [
    "from IPython.display import HTML, display\n",
    "\n",
    "def display_table(data):\n",
    "    html = \"<table>\"\n",
    "    for row in data:\n",
    "        html += \"<tr>\"\n",
    "        for field in row:\n",
    "            html += \"<td><h4>%s</h4><td>\"%(field)\n",
    "        html += \"</tr>\"\n",
    "    html += \"</table>\"\n",
    "    display(HTML(html))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "antique-action",
   "metadata": {},
   "source": [
    "<h2 style = \"font-size: 15px; color: #236\">In this part ,I load the data :</h2>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 239,
   "id": "dated-version",
   "metadata": {},
   "outputs": [],
   "source": [
    "test = pd.read_csv('books_test.csv')\n",
    "train = pd.read_csv('books_train.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "noble-woman",
   "metadata": {},
   "source": [
    "<h2 style = \"font-size: 15px; color: #236\"> Then , I use \"tokenize\" function to separate the words in a sentence and also to remove punctuation in both train dataframe and test dataframe  :<h2/>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 240,
   "id": "opposite-renewal",
   "metadata": {},
   "outputs": [],
   "source": [
    "from __future__ import unicode_literals\n",
    "from hazm import *\n",
    "stemmer = Stemmer()\n",
    "lemmatizer = Lemmatizer()\n",
    "train['description'] = train.apply(lambda row: tokenizer.tokenize(row['description']), axis=1)\n",
    "test['description'] = test.apply(lambda row: tokenizer.tokenize(row['description']), axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "handy-league",
   "metadata": {},
   "source": [
    "<h2 style = \"font-size: 15px; color: #236\"> in the \"CATEGORY\" list , I keep all categories of books .<h2/>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 241,
   "id": "engaging-information",
   "metadata": {},
   "outputs": [],
   "source": [
    "CATEGORY = ['جامعه‌شناسی' , 'کلیات اسلام', 'داستان کودک و نوجوانان', 'داستان کوتاه' ,'مدیریت و کسب و کار', 'رمان' ]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "vertical-outline",
   "metadata": {},
   "source": [
    "<h2 style = \"font-size: 25px;text-align: center \"> Pre Processing </h2>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "united-citizenship",
   "metadata": {},
   "source": [
    "<h2 style = \"font-size: 15px; color: #236\"> In \"pre_processing\" function , the 'description' of each data , I first check that the word is not in the list of 'stop words ' which indicates the repetitive useless words and also I check if the given word is numeric or not , then I append this word to a list and after the end of the loop , replace it with the previous description .<br/> <h2/>\n",
    "<h2 style = \"font-size: 15px; color: #236\"> The 'stemming' remove the plural sign of words.<br/>\n",
    "    the 'lemmatization'  returns the root of the word.\n",
    "    but I didn't use them in pre-processing because they had no effect on accuracy .<h2/>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 242,
   "id": "acute-retention",
   "metadata": {},
   "outputs": [],
   "source": [
    "def pre_processing(data)   :\n",
    "    Stop_Word = set(stopwords_list())\n",
    "    for i in range(len(data)):\n",
    "        o =[]\n",
    "        p = data.iloc[i].at['description']\n",
    "        for j in p:\n",
    "            if (j not in Stop_Word) and (j.isnumeric() is False) and j != 'های' and j != 'ای'  and  j!='ی' and j != 'ها' and j != 'ی' and len(j)>2 and j !='نمی' and j!='کتاب':\n",
    "                o.append(j)\n",
    "            else:\n",
    "                continue\n",
    "        data.iloc[i].at['description'] = o\n",
    "        del o \n",
    "    return data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 243,
   "id": "pediatric-vacuum",
   "metadata": {},
   "outputs": [],
   "source": [
    "u = pre_processing(train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "frequent-geography",
   "metadata": {},
   "source": [
    "<h2 style = \"font-size: 25px;text-align: center \"> Training </h2>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dedicated-pittsburgh",
   "metadata": {},
   "source": [
    "<h2 style = \"font-size: 15px;color: #236 \"> The \"training\" finction , takes the train dataframe and separates the different categories and gives it to \"bag_of_words\" function. This function counts the words in the description of the first data with the help of \"Counter\" and saves it in the 'bag' dictionary and updates this dictionary for all subsequent data. <h2/>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 247,
   "id": "cellular-investigator",
   "metadata": {},
   "outputs": [],
   "source": [
    "def bag_of_words(category) :\n",
    "    bag = Counter(category.iloc[0].at['description'])\n",
    "    for i in range(1,len(category)):\n",
    "        bag.update(category.iloc[i].at['description'])\n",
    "    return bag "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 248,
   "id": "oriented-purchase",
   "metadata": {},
   "outputs": [],
   "source": [
    "def training(train):\n",
    "    trained = pre_processing(train)\n",
    "    cat_bag = {}\n",
    "    for CAT in CATEGORY:\n",
    "        C = trained[trained['categories'] == CAT]\n",
    "        cat_bag[CAT] = bag_of_words(C)\n",
    "    return cat_bag"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "olive-christmas",
   "metadata": {},
   "source": [
    "<h2 style = \"font-size: 25px;text-align: center \"> Naive Bayes <h2/>\n",
    "<h2 style = \"font-size: 15px;color: #236 \"> Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes’ theorem with the “naive” assumption of conditional independence between every pair of features given the value of the class variable. Bayes’ theorem states the following relationship, given class variable c and dependent feature vector x1 through xn:</h2>\n",
    "<h2 style = \"font-size: 20px;color: #236 \"> $$ P(c|X) =\\frac{P(X|c)P(c)}{P(X)} == \\frac{P(x_1|c) \\times ... \\times P(x_n|c) \\times P(c)}{P(X)}$$</h2>\n",
    "\n",
    "  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "forbidden-smart",
   "metadata": {},
   "source": [
    "<h2 style = \"font-size: 15px;color: #236 \"> We can re-write our Bayes Theorem as:</h2>\n",
    "<h2 style = \"font-size: 15px,text-align: center ;color: #236 \"> $$ Posterior = \\frac{( Likelihood \\times Prior )} {Evidence}$$ </h2>\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "czech-filename",
   "metadata": {},
   "source": [
    "<h2 style = \"font-size: 15px;color: #236 \">  Likelihood is the probability of an event given a specific class.<br/>\n",
    " Prior is the probability of that class and evidence is the probability of that event in the whole dataset. <br/>\n",
    "    Posterior is the probability of a class given a set of features or an event. We have to maximize this posterior called as Maximum-a-Posteriori which is directly proportional to the product of likelihood and prior. This can be represented as:<h2/>\n",
    "<h2 style = \"font-size: 10px,text-align: center ;color: #236 \">  $$ C_{MAP} = argmaxP(c|X) = argmax \\frac{P(X|c)P(c)}{P(X)} = argmax {P(X|c)P(c)}$$ </h2>\n",
    "<h2 style = \"font-size: 10px,text-align: center ;color: #236 \"> $$ C_{MAP} =  argmax {P(x_1|c)\\times .... \\times  P(x_n|c)P(c)}$$ </h2>\n",
    "<h2 style = \"font-size: 15px;color: #236 \">In this project , since the probability of occurrence for each class is the same and is equal to 1/6 , we avoid multiplying it by the likelihood .</h2>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "secure-equation",
   "metadata": {},
   "source": [
    "<h2 style = \"font-size: 15px;color: #236 \">In  \"Naive Bayes\" function , I calculate the prabability of each word in each category in each sample data with the help \"px_pc\" function , then I do the same for the next words and  add all these possibilities together for one category and save it in a dictionary with the category name . Eventually ,I calculate the maximum value of the dictionary for each data sample and save it as prediction .<br/>\n",
    "The reason I added the calculated probabilities together was that the probability value of each word in the bag dictionary is very, very small and finally for a category it may tend to zero .<br/>\n",
    "<h2/> "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 249,
   "id": "future-vertex",
   "metadata": {},
   "outputs": [],
   "source": [
    "def px_pc(word,cat,cat_bag):\n",
    "    bag = cat_bag[cat]\n",
    "    if word in bag :\n",
    "        return bag[word]/sum(bag.values())\n",
    "    else:\n",
    "        return 10**(-8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 319,
   "id": "given-hindu",
   "metadata": {},
   "outputs": [],
   "source": [
    "def Naive_Bayes(data , cat_bag):\n",
    "    processed_data = pre_processing(data) \n",
    "    predict = [0] * len(processed_data)\n",
    "    for i in range(len(processed_data)):\n",
    "        P_CATEGORIES = {}\n",
    "        for cat in CATEGORY :\n",
    "            P_cat = 0\n",
    "            for word in processed_data.iloc[i].at['description']:\n",
    "                P_cat += px_pc(word,cat,cat_bag)\n",
    "            P_CATEGORIES[cat] = P_cat\n",
    "        max_key = max(P_CATEGORIES, key=P_CATEGORIES.get)\n",
    "        predict[i] = max_key\n",
    "    return predict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 320,
   "id": "under-steps",
   "metadata": {},
   "outputs": [],
   "source": [
    "predict = Naive_Bayes(test , cat_bag)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 321,
   "id": "secondary-permission",
   "metadata": {},
   "outputs": [],
   "source": [
    "cat_bag = training(train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "worse-spare",
   "metadata": {},
   "source": [
    "<h2 style = \"font-size: 25px;text-align: center \"> Evaluating <h2/>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "boolean-laugh",
   "metadata": {},
   "source": [
    "<h2 style = \"font-size: 15px;color: #236 \"> In this function , I'm going to evaluate  'Rcall' ,' Precision' , 'F1' and 'accuracy' parameter by calculating the required values in the problem : </h2>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 322,
   "id": "hidden-craft",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def run(data , cat_bag , predict):\n",
    "    cat_list=[]\n",
    "    All_corect_class = 0\n",
    "    for cat in CATEGORY :\n",
    "        Correct_Detected_Class = 0\n",
    "        All_Detected_Class = len([elem for elem in predict if elem == cat])\n",
    "        Total_Class = np.sum(data['categories'] == cat )\n",
    "        for i in range(len(data)):\n",
    "            if predict[i] == cat :                \n",
    "                if predict[i] == data.iloc[i].at['categories']:\n",
    "                    Correct_Detected_Class += 1\n",
    "        All_corect_class +=  Correct_Detected_Class \n",
    "        Recall = Correct_Detected_Class / Total_Class\n",
    "        Precision = Correct_Detected_Class / All_Detected_Class\n",
    "        F1 = 2*((Precision * Recall)/(Precision + Recall))\n",
    "        L = [cat , Recall , Precision , F1]\n",
    "        cat_list.append(L)\n",
    "        accuracy = All_corect_class / len(data)\n",
    "    return  cat_list  ,  accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 323,
   "id": "identified-florida",
   "metadata": {},
   "outputs": [],
   "source": [
    "cat_list , accuracy = run(test,cat_bag,predict )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 324,
   "id": "amino-asthma",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table><tr><td><h4>category</h4><td><td><h4>Recall</h4><td><td><h4>Precision</h4><td><td><h4>F1</h4><td></tr><tr><td><h4>جامعه‌شناسی</h4><td><td><h4>0.7866666666666666</h4><td><td><h4>0.7564102564102564</h4><td><td><h4>0.7712418300653594</h4><td></tr><tr><td><h4>کلیات اسلام</h4><td><td><h4>0.72</h4><td><td><h4>0.9473684210526315</h4><td><td><h4>0.8181818181818181</h4><td></tr><tr><td><h4>داستان کودک و نوجوانان</h4><td><td><h4>0.84</h4><td><td><h4>0.7078651685393258</h4><td><td><h4>0.7682926829268292</h4><td></tr><tr><td><h4>داستان کوتاه</h4><td><td><h4>0.84</h4><td><td><h4>0.5779816513761468</h4><td><td><h4>0.6847826086956522</h4><td></tr><tr><td><h4>مدیریت و کسب و کار</h4><td><td><h4>0.9066666666666666</h4><td><td><h4>0.8607594936708861</h4><td><td><h4>0.8831168831168831</h4><td></tr><tr><td><h4>رمان</h4><td><td><h4>0.36</h4><td><td><h4>0.7105263157894737</h4><td><td><h4>0.4778761061946902</h4><td></tr></table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "result_table = [['category' ,'Recall','Precision',\"F1\"],cat_list[0],cat_list[1],cat_list[2],cat_list[3],cat_list[4],cat_list[5]]\n",
    "display_table(result_table)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 325,
   "id": "challenging-preliminary",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.7422222222222222\n"
     ]
    }
   ],
   "source": [
    "print(accuracy)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "rising-killer",
   "metadata": {},
   "source": [
    "<h2 style = \"font-size: 15px; color: #236\">  As you see above , the value of 'Recall' for the 'رمان' is low, meaning that our model for estimating the 'رمان' is not well trained and we need more training data to teach our model.\n",
    "But the value of 'Precision' is not low , and this result means that among the estimates made for the 'رمان', a large number have been estimated correctly.<br/>\n",
    "for example , 'مدیریت کسب و کار ' is Well estimated , فhis indicates that the words in this class for training were more unique and allowed for better estimation.</h2>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "moral-frank",
   "metadata": {},
   "source": [
    "<h2 style = \"font-size: 25px;text-align: center; color: #000\"> Bigrams</h2>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "vanilla-reunion",
   "metadata": {},
   "source": [
    "<h2 style = \"font-size: 15px; color: #236\">In a text document we may need to identify  pair of words which will help in sentiment analysis like  best performance or heavy rain . we need to generate such word pairs from the existing sentence maintain their current sequences. Such pairs are called bigrams. for example , two collocation 'صمیم قلب' and 'دریچه های قلب' have a common word but different meaning.<br/></h2>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "durable-imagination",
   "metadata": {},
   "source": [
    "<h2 style = \"font-size: 20px;text-align: center; \">N-gram<br/></h2>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "disciplinary-vegetation",
   "metadata": {},
   "source": [
    "<h2 style = \"font-size: 15px; color: #236\">N-gram is simply a sequence of N words.if we assign a probability to the occurrence of an N-gram or the probability of a word occurring next in a sequence of words, it can be very useful.<br/>\n",
    " First of all, it can help in deciding which N-grams can be chunked together to form single entities (like “San Francisco” chunked together as one word, “high school” being chunked as one word).<br/>\n",
    "It can also help make next word predictions. Say you have the partial sentence “Please hand over your”. Then it is more likely that the next word is going to be “test” or “assignment” or “paper” than the next word being “school”.<b/>\n",
    "It can also help to make spelling error corrections. For instance, the sentence “drink cofee” could be corrected to “drink coffee” if you knew that the word “coffee” had a high probability of occurrence after the word “drink” and also the overlap of letters between “cofee” and “coffee” is high.<br/>\n",
    "Now that we understand this concept, we can build with it: that’s the N-gram model. Basically, an N-gram model predicts the occurrence of a word based on the occurrence of its N – 1 previous words. So here we are answering the question – how far back in the history of a sequence of words should we go to predict the next word?<br/>\n",
    "  Generally, the bigram model works well and it may not be necessary to use trigram models or higher N-gram models.\n",
    "\n",
    "</h2>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "certified-realtor",
   "metadata": {},
   "source": [
    "<h2 style = \"font-size: 25px;text-align: center; color: #000\"> Additive Smoothing</h2>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "signal-facility",
   "metadata": {},
   "source": [
    "<h2 style = \"font-size: 15px; color: #236\">Laplace smoothing or Additive smoothing is a smoothing technique that handles the problem of zero probability in Naïve Bayes. Using Laplace smoothing, we can represent P(w’|positive) as </h2>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "rising-settlement",
   "metadata": {},
   "source": [
    "\n",
    "<h2 style = \"font-size: 20px; color: #236\">$$  P(w \\prime  | positive ) = \\frac{number \\enspace of \\enspace reviews \\enspace with \\enspace w \\prime \\enspace and \\enspace y = positive _\\enspace + \\alpha }{N + \\alpha*K}  $$</h2>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "characteristic-deviation",
   "metadata": {},
   "source": [
    "<h2 style = \"font-size: 15px; color: #236\">which we use when $$P(w \\prime |positive )= 0 $$ <br/>\n",
    "    alpha represents the smoothing parameter,<br/>\n",
    "K represents the number of dimensions (features) in the data <br/>\n",
    "N represents the number of reviews with y=positive <br/>\n",
    "If we choose a value of alpha not equal to 0 , , the probability will no longer be zero even if a word is not present in the training dataset.\n",
    "</h2>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 326,
   "id": "specified-edward",
   "metadata": {},
   "outputs": [],
   "source": [
    "alpha = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 327,
   "id": "czech-mystery",
   "metadata": {},
   "outputs": [],
   "source": [
    "def Additive_smoothing(data , cat_bag): \n",
    "    processed_data = pre_processing(data) \n",
    "    predict = [0] * len(processed_data)\n",
    "    for i in range(len(processed_data)):\n",
    "        len_words = len(processed_data.iloc[i].at['description'])\n",
    "        P_CATEGORIES = {}\n",
    "        for cat in CATEGORY :\n",
    "            bag = cat_bag[cat]\n",
    "            P_cat = 1\n",
    "            for word in processed_data.iloc[i].at['description']:\n",
    "                if word in bag :\n",
    "                    P_cat +=  bag[word]/sum(bag.values())\n",
    "                else:\n",
    "                    P_cat +=  (alpha) / (len(bag) + alpha* len_words)\n",
    "            P_CATEGORIES[cat] = P_cat\n",
    "            del P_cat\n",
    "        max_key = max(P_CATEGORIES, key=P_CATEGORIES.get)\n",
    "        predict[i] = max_key\n",
    "    return predict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 328,
   "id": "statutory-praise",
   "metadata": {},
   "outputs": [],
   "source": [
    "predict_smoothing = Additive_smoothing(test , cat_bag)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 334,
   "id": "varying-humanitarian",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table><tr><td><h4>category</h4><td><td><h4>Recall</h4><td><td><h4>Precision</h4><td><td><h4>F1</h4><td></tr><tr><td><h4>جامعه‌شناسی</h4><td><td><h4>0.7866666666666666</h4><td><td><h4>0.7564102564102564</h4><td><td><h4>0.7712418300653594</h4><td></tr><tr><td><h4>کلیات اسلام</h4><td><td><h4>0.72</h4><td><td><h4>0.9473684210526315</h4><td><td><h4>0.8181818181818181</h4><td></tr><tr><td><h4>داستان کودک و نوجوانان</h4><td><td><h4>0.84</h4><td><td><h4>0.7078651685393258</h4><td><td><h4>0.7682926829268292</h4><td></tr><tr><td><h4>داستان کوتاه</h4><td><td><h4>0.84</h4><td><td><h4>0.5779816513761468</h4><td><td><h4>0.6847826086956522</h4><td></tr><tr><td><h4>مدیریت و کسب و کار</h4><td><td><h4>0.9066666666666666</h4><td><td><h4>0.8607594936708861</h4><td><td><h4>0.8831168831168831</h4><td></tr><tr><td><h4>رمان</h4><td><td><h4>0.36</h4><td><td><h4>0.7105263157894737</h4><td><td><h4>0.4778761061946902</h4><td></tr></table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cat_list , accuracy = run(test,cat_bag,predict )\n",
    "result_table = [['category' ,'Recall','Precision',\"F1\"],cat_list[0],cat_list[1],cat_list[2],cat_list[3],cat_list[4],cat_list[5]]\n",
    "display_table(result_table)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 335,
   "id": "disciplinary-territory",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7422222222222222"
      ]
     },
     "execution_count": 335,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "polar-search",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "opposite-delicious",
   "metadata": {},
   "source": [
    "<h2 style = \"font-size: 25px;text-align: center; color: #000\"> Verification</h2>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "loose-temple",
   "metadata": {},
   "source": [
    "<h2 style = \"font-size: 15px; color: #236\"> In this section , I display the first 5 words with the most repetition for each categories . The first time I checked this , the unimportant words had the most repetition in each class, so I deleted them in the pre-processing stage and I got better results :<h2/>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 263,
   "id": "metric-brother",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "for cat in CATEGORY :\n",
    "    fig = plt.figure()\n",
    "    ax = fig.add_axes([0,0,1,1])\n",
    "    in_order = cat_bag[cat].most_common()\n",
    "    ax.set_ylabel('Frequency')\n",
    "    ax.set_title(cat)\n",
    "    words = [ in_order[0][0],in_order[1][0],in_order[1][0],in_order[3][0],in_order[4][0],in_order[5][0] ]\n",
    "    frequency = [in_order[0][1] , in_order[1][1] , in_order[2][1] , in_order[3][1] , in_order[4][1], in_order[5][1]]\n",
    "    ax.bar(words,frequency)\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "attended-johns",
   "metadata": {},
   "source": [
    "<h2 style = \"font-size: 25px;text-align: center; color: #000\"> Precision and Recall<h2/>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "stylish-mozambique",
   "metadata": {},
   "source": [
    "<h2 style = \"font-size: 15px; color: #236\"> \n",
    "First I define the confusion matrix and its parts here:</h2>\n",
    "<img src=\"3.png\">\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "friendly-thirty",
   "metadata": {},
   "source": [
    "<h2 style = \"font-size: 25px; color: #236\"> Precision </h2>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "scientific-detective",
   "metadata": {},
   "source": [
    "<h2 style = \"font-size: 15px; color: #236\"> Precision evaluates how precise a model is in predicting positive labels. Precision answers the question, out of the number of times a model predicted positive, how often was it correct? Precision is the percentage of your results which are relevant. The formula for precision is below : <h2/>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "permanent-developer",
   "metadata": {},
   "source": [
    "<h2 style = \"font-size: 20px; color: #236\">$$Precision = \\frac {True Positive}{True Positive + False Positive}$$</h2>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "prospective-viewer",
   "metadata": {},
   "source": [
    "<h2 style = \"font-size: 15px; color: #236\">The top of the formula is the number of positive observations that a model predicted correctly. The denominator is the number of times the model predicted a positive label in total.<br/>\n",
    "In other words, Precision states that among the data of a class, how many samples are correctly identified\n",
    "<img src=\"4.png\">    \n",
    "Precision is a  good evaluation metric to use when the cost of a false positive is very high and the cost of a false negative is low.<h2/>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "announced-exception",
   "metadata": {},
   "source": [
    "<h2 style = \"font-size: 25px; color: #236\"> Recall </h2>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "honey-nepal",
   "metadata": {},
   "source": [
    "<h2 style = \"font-size: 15px; color: #236\"> Recall calculates the percentage of actual positives a model correctly identified (True Positive). When the cost of a false negative is high, you should use recall.The formula for recall is below:</h2>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "spoken-demand",
   "metadata": {},
   "source": [
    "<h2 style = \"font-size: 20px; color: #236\">$$Recall = \\frac {True Positive}{True Positive + False Negetive}$$</h2>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "banned-profession",
   "metadata": {},
   "source": [
    "<h2 style = \"font-size: 15px; color: #236\"> The numerator is the number of true positives or the number of positives the model correctly identified. The denominator is the number of actual positives predicted by the model and the number of positives incorrectly predicted as negative by the model.<br/>\n",
    "In other words, Recall states that  among the data that were correctly identified, how many samples were correctly identified.\n",
    "<img src=\"5.png\">\n",
    "having a high recall doesn’t necessary mean a model is good. For example, if a model predicted that everyone had a disease, the model would have a perfect recall but it would have a lot of false positives and be telling people they were sick when they were not.<h2/>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "weighted-works",
   "metadata": {},
   "source": [
    "<h2 style = \"font-size: 15px; color: #236\">It is important to consider what question you are trying to answer when deciding what evaluation metric to use and wether false positives or false negatives are worse.<h2/>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "incorporate-special",
   "metadata": {},
   "source": [
    "<h2 style = \"font-size: 25px; color: #236\"> F1 </h2>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "rolled-fleet",
   "metadata": {},
   "source": [
    "<h2 style = \"font-size: 20px; color: #236\">$$ F_1 = 2 * \\frac{Precision * Recall}{Precision + Recall}$$</h2>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "important-things",
   "metadata": {},
   "source": [
    "<h2 style = \"font-size: 15px; color: #236\">F1 Score is the weighted average of Precision and Recall. Therefore, this score takes both false positives and false negatives into account. Intuitively it is not as easy to understand as accuracy, but F1 is usually more useful than accuracy, especially if you have an uneven class distribution. Accuracy works best if false positives and false negatives have similar cost. If the cost of false positives and false negatives are very different, it’s better to look at both Precision and Recall. <br/>\n",
    "Similar to arithmetic mean, the F1-score will always be somewhere in between precision and recall. But it behaves differently: the F1-score gives a larger weight to lower numbers. For example, when Precision is 100% and Recall is 0%, the F1-score will be 0%, not 50%<br/>    \n",
    "However, a higher F1-score does not necessarily mean a better classifier. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "plastic-invalid",
   "metadata": {},
   "source": [
    "<h2 style = \"font-size: 25px;text-align: center; color: #000\"> weighted and micro and macro average<h2/>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "everyday-duplicate",
   "metadata": {},
   "source": [
    "<h2 style = \"font-size: 20px; color: #236\">macro-averaged </h2>\n",
    "<h2 style = \"font-size: 15px; color: #236\"> A macro-average will compute the F1 independently for each class and then take the average (hence treating all classes equally):\n",
    "</h2>\n",
    "<h2 style = \"font-size: 20px; color: #236\">$$Macro \\enspace averaged = \\frac{sum \\enspace of \\enspace all\\enspace determined \\enspace F1\\enspace for\\enspace each \\enspace class}{the \\enspace number \\enspace of \\enspace classes}$$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "innovative-finish",
   "metadata": {},
   "source": [
    "<h2 style = \"font-size: 15px; color: #236\">When we use  the macro average, we gave equal weights to each class. We don’t have to do that: in weighted-average , we weight each determined value of each class by the number of samples from that class:\n",
    "<h2 style = \"font-size: 20px; color: #236\">weighted-average </h2>\n",
    "<h2 style = \"font-size: 20px; color: #236\">$$ weighted\\enspace average = \\frac{w_1 * F_1 + .... + w_n * F_n}{n}$$</h2>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "wrong-thompson",
   "metadata": {},
   "source": [
    "<h2 style = \"font-size: 20px; color: #236\">micro-averaged </h2>\n",
    "<h2 style = \"font-size: 15px; color: #236\">To calculate the micro-averaged  F1, we first compute micro-averaged precision and micro-averaged recall over all the samples , and then combine the two. How do we “micro-average”? We simply look at all the samples together. In the multi-class case, we consider all the correctly predicted samples to be True Positives:</h2>\n",
    "<h2 style = \"font-size: 20px; color: #236\">$$ micro\\enspace average = \\frac{TP_{total}}{TP_{total} + FP_{total}}$$</h2>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "legitimate-romania",
   "metadata": {},
   "source": [
    "<h2 style = \"font-size: 15px; color: #236\"> To summarize, the following always holds true for the micro-F1 case:</h2>\n",
    "<h2 style = \"font-size: 20px;text-align: center; color: #236\">    \n",
    "micro-F1 = micro-precision = micro-recall = accuracy<h2/>\n",
    "    <h2 style = \"font-size: 15px; color: #236\"> Implementing Macro_Average function :</h2>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 351,
   "id": "affected-mambo",
   "metadata": {},
   "outputs": [],
   "source": [
    "def macro_average(cat_list):\n",
    "    macro_recall ,macro_precision ,macro_F1 = 0, 0, 0\n",
    "    for i in range(6):\n",
    "        macro_recall += cat_list[i][1]\n",
    "        macro_precision += cat_list[i][2]\n",
    "        macro_F1 += cat_list[i][3]\n",
    "    macro_averaged_recall = macro_recall/6\n",
    "    macro_averaged_precision = macro_precision/6\n",
    "    macro_averaged_F1 = macro_F1/6\n",
    "    return macro_averaged_recall , macro_averaged_precision , macro_averaged_F1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "every-conservation",
   "metadata": {},
   "source": [
    "<h2 style = \"font-size: 15px; color: #236\"> Because the number of instances in each class is the same, the result of weighted_average and macro_averaged are the same . <h2/>\n",
    "    <h2 style = \"font-size: 15px; color: #236\"> Implementing Micro_Average function :</h2>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 349,
   "id": "raising-rolling",
   "metadata": {},
   "outputs": [],
   "source": [
    "def micro_average(cat_list) :\n",
    "    TP_total , All_Detected_Class = 0 , 0\n",
    "    for cat in CATEGORY :\n",
    "        Correct_Detected_Class = 0\n",
    "        All_Detected_Class += len([elem for elem in predict if elem == cat])\n",
    "        Total_Class = np.sum(test['categories'] == cat )\n",
    "        for i in range(len(test)):\n",
    "            if predict[i] == cat :                \n",
    "                if predict[i] == test.iloc[i].at['categories']:\n",
    "                    Correct_Detected_Class += 1\n",
    "        TP_total +=  Correct_Detected_Class \n",
    "    micro_averaged = TP_total/All_Detected_Class \n",
    "    return  micro_averaged"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "consistent-action",
   "metadata": {},
   "source": [
    "<h2 style = \"font-size: 15px; color: #236\"> As you can see from the implementation, what we calculate in Micro_Average , is the number of true-positive samples over the total number of samples which is equal to the accuracy and this value is the same for Precision , Recall and F1.</h2> "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 353,
   "id": "middle-penalty",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table><tr><td><h4>  </h4><td><td><h4>Recall</h4><td><td><h4>Precision</h4><td><td><h4>F1</h4><td></tr><tr><td><h4> macro_average </h4><td><td><h4>0.7422222222222222</h4><td><td><h4>0.7601518844731201</h4><td><td><h4>0.7339153215302053</h4><td></tr><tr><td><h4> weighted_average </h4><td><td><h4>0.7422222222222222</h4><td><td><h4>0.7601518844731201</h4><td><td><h4>0.7339153215302053</h4><td></tr><tr><td><h4> micro_average </h4><td><td><h4>0.7422222222222222</h4><td><td><h4>0.7422222222222222</h4><td><td><h4>0.7422222222222222</h4><td></tr></table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "macro_averaged_recall , macro_averaged_precision , macro_averaged_F1 = macro_average(cat_list)\n",
    "micro_averaged = micro_average(cat_list)\n",
    "result = [['  ','Recall','Precision','F1'],[' macro_average ',macro_averaged_recall, macro_averaged_precision , macro_averaged_F1],[' weighted_average ',macro_averaged_recall, macro_averaged_precision , macro_averaged_F1],[' micro_average ',micro_averaged,micro_averaged,micro_averaged]]\n",
    "display_table(result)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "offensive-snake",
   "metadata": {},
   "source": [
    "<h2 style = \"font-size: 15px; color: #236\"> And as you know the accuracy = 0.742222222<h2/>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "prospective-purchase",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
